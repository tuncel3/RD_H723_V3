// ==============================================================================
// This file was autogenerated by a Python script.
//
// Purpose:
//   - These lookup tables are used to quickly set/reset GPIO pins for writing
//     8-bit parallel data to a GLCD (Graphic LCD) screen.
//   - Instead of calculating GPIO settings at runtime (slow!), we precompute
//     the correct BSRR (bit set/reset register) values for all possible
//     8-bit combinations.
//
// Ports:
//   - Port A: Controls bits D4 (PA15), D5 (PA12), D6 (PA11), D7 (PA10)
//   - Port C: Controls bits D1 (PC12), D2 (PC11), D3 (PC10)
//   - Port D: Controls bit D0 (PD0)
//
// Usage:
//   - For a given 8-bit data value (0-255), lookup bsrrA[d], bsrrC[d], bsrrD[d]
//     and write them to GPIOA->BSRR, GPIOC->BSRR, GPIOD->BSRR respectively.
//
// Why?
//   - Improves speed dramatically by avoiding bitwise calculations during
//     GLCD data transfer.
//   - Necessary for fast screen updates, especially on low-frequency MCUs.
//
// Important:
//   - Ensure that the involved GPIO pins are correctly configured as outputs!
//   - Timing between successive writes must respect GLCD controller specs.
//
// Author: Future You (who knew you'd forget everything)
// ==============================================================================


// ==============================================================================
// This file was autogenerated by the following Python script:
//
// HOW TO REGENERATE:
// 1. If you change any GLCD data pin assignments, update the pin masks below.
// 2. Copy this code into a Python file (e.g., gen_glcd_bsrr.py).
// 3. Run the script to generate the new glcd_bsrr_tables.h.
//
// Python Code:
// ------------------------------------------------------------------------------
// import textwrap, os
//
// # Define pin masks
// PIN_PA15 = 1<<15
// PIN_PA12 = 1<<12
// PIN_PA11 = 1<<11
// PIN_PA10 = 1<<10
//
// PIN_PC12 = 1<<12
// PIN_PC11 = 1<<11
// PIN_PC10 = 1<<10
//
// PIN_PD0  = 1<<0
//
// def bsrr(set_mask, pin_mask):
//     return set_mask | (pin_mask<<16)
//
// bsrrA=[]
// bsrrC=[]
// bsrrD=[]
// for d in range(256):
//     setA, resetA = 0, 0
//     if d & 0x10: setA |= PIN_PA15
//     else:        resetA |= PIN_PA15
//     if d & 0x20: setA |= PIN_PA12
//     else:        resetA |= PIN_PA12
//     if d & 0x40: setA |= PIN_PA11
//     else:        resetA |= PIN_PA11
//     if d & 0x80: setA |= PIN_PA10
//     else:        resetA |= PIN_PA10
//     bsrrA.append(setA | (resetA<<16))
//
//     setC, resetC = 0, 0
//     if d & 0x02: setC |= PIN_PC12
//     else:        resetC |= PIN_PC12
//     if d & 0x04: setC |= PIN_PC11
//     else:        resetC |= PIN_PC11
//     if d & 0x08: setC |= PIN_PC10
//     else:        resetC |= PIN_PC10
//     bsrrC.append(setC | (resetC<<16))
//
//     bsrrD.append((PIN_PD0 if d & 0x01 else PIN_PD0<<16))
//
// def format_array(name, arr):
//     lines = []
//     lines.append(f"static const uint32_t {name}[256] = {{")
//     for i in range(0, 256, 8):
//         chunk = arr[i:i+8]
//         hexes = ", ".join(f"0x{v:08X}" for v in chunk)
//         lines.append("    " + hexes + ("," if i+8<256 else ""))
//     lines.append("};\n")
//     return "\n".join(lines)
//
// header = "// Autogenerated lookup tables for GLCD data write\n\n#include <stdint.h>\n\n"
// header += format_array("bsrrA", bsrrA)
// header += format_array("bsrrC", bsrrC)
// header += format_array("bsrrD", bsrrD)
//
// with open('glcd_bsrr_tables.h','w') as f:
//     f.write(header)
// ------------------------------------------------------------------------------
//
// Purpose:
//   - Fast GLCD data write by precomputing GPIO BSRR values.
//   - Pins:
//       * D4 -> PA15
//       * D5 -> PA12
//       * D6 -> PA11
//       * D7 -> PA10
//       * D1 -> PC12
//       * D2 -> PC11
//       * D3 -> PC10
//       * D0 -> PD0
//
// Author: YOU, when you still cared about the project.
// ==============================================================================


// Autotgenerated lookup tables for GLCD data write

#include <stdint.h>

static const uint32_t bsrrA[256] = {
    0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000,
    0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000, 0x9C000000,
    0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000,
    0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000, 0x1C008000,
    0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000,
    0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000, 0x8C001000,
    0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000,
    0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000, 0x0C009000,
    0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800,
    0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800, 0x94000800,
    0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800,
    0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800, 0x14008800,
    0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800,
    0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800, 0x84001800,
    0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800,
    0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800, 0x04009800,
    0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400,
    0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400, 0x98000400,
    0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400,
    0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400, 0x18008400,
    0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400,
    0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400, 0x88001400,
    0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400,
    0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400, 0x08009400,
    0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00,
    0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00, 0x90000C00,
    0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00,
    0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00, 0x10008C00,
    0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00,
    0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00, 0x80001C00,
    0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00,
    0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00, 0x00009C00
};
static const uint32_t bsrrC[256] = {
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00,
    0x1C000000, 0x1C000000, 0x0C001000, 0x0C001000, 0x14000800, 0x14000800, 0x04001800, 0x04001800,
    0x18000400, 0x18000400, 0x08001400, 0x08001400, 0x10000C00, 0x10000C00, 0x00001C00, 0x00001C00
};
static const uint32_t bsrrD[256] = {
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001,
    0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001, 0x00010000, 0x00000001
};
